schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getPost(id: String!): Post! @aws_api_key
  getAllPosts(limit: Int!, nextToken: String): PostsResult! @aws_api_key
  getUserAccount(id: String!): User! @aws_cognito_user_pools
  getCommentsPerPost(postId: String!): [Comment!]! @aws_cognito_user_pools
  getSingleComment(commentId: String!): Comment! @aws_cognito_user_pools
  getUser(userId: String!): User! @aws_cognito_user_pools
  generateSuggestions(input: String!): String! @aws_api_key
}

type Mutation {
  createUserAccount(userInput: CreateUserInput!): User! @aws_cognito_user_pools
  updateUserAccount(userInput: UpdateUserInput!): User! @aws_cognito_user_pools
  createPost(postInput: CreatePostInput!): Post! @aws_api_key
  createPostLambda(postInput: CreatePostInput!): Post! @aws_api_key
  createComment(commentInput: CreateCommentInput!): Comment!
    @aws_cognito_user_pools
  sendMessage(input: MessageInput!): Message! @aws_api_key
  deletePost(userId: String!, postId: String!): Boolean! @aws_api_key
}

type User @aws_cognito_user_pools {
  id: String!
  username: String!
  firstName: String!
  lastName: String!
  userType: USERTYPE!
  address: Address
  email: AWSEmail!
  profilePicUrl: String!
  createdOn: AWSTimestamp
  updatedOn: AWSTimestamp
}

type Comment @aws_cognito_user_pools {
  id: String!
  user: User!
  postId: String!
  comment: String!
  createdOn: AWSTimestamp
}

type Message @aws_api_key {
  id: String!
  messageType: MESSAGETYPE!
  senderId: String!
  receiverId: String!
  text: String
  read: Boolean!
  image: String
  createdOn: AWSTimestamp!
}

input MessageInput @aws_api_key {
  messageType: MESSAGETYPE!
  senderId: String!
  receiverId: String!
  text: String
  image: String
  read: Boolean!
}

enum MESSAGETYPE {
  TEXT
  IMAGE
}

input CreateCommentInput @aws_cognito_user_pools {
  userId: String!
  postId: String!
  comment: String!
}
input CreateUserInput @aws_cognito_user_pools {
  username: String!
  firstName: String!
  lastName: String!
  email: AWSEmail!
  userType: USERTYPE!
  profilePicUrl: String!
}
input UpdateUserInput @aws_cognito_user_pools {
  id: String!
  username: String!
  email: AWSEmail!
  profilePicUrl: String!
  address: AddressInput!
}
type Address @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}
input AddressInput @aws_cognito_user_pools {
  street: String!
  city: String!
  zip: Int!
  country: String!
}
input CreatePostInput @aws_cognito_user_pools {
  content: String!
  userId: String!
  imageUrl: String
}

type Post @aws_api_key {
  id: String!
  userId: String!
  content: String!
  comment: [Comment!]
  imageUrl: String
  createdOn: AWSTimestamp!
}

type Subscription {
  createdPost: Post @aws_subscribe(mutations: ["createPost"])
  createdComment: Comment @aws_subscribe(mutations: ["createComment"])
}
type PostsResult @aws_api_key {
  items: [Post!]!
  nextToken: String
}

enum USERTYPE {
  ADMIN
  MEMBER
}
